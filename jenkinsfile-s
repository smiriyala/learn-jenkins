node('workstation'){
    //env is default global variable, stored values
    env.SAMPLE_URL = "google.com"

    //PARAMETERS:
    properties([
        parameters([
            string(name: 'PERSON', defaultValue: 'Mr Parameters', description: 'Who should i say hello to?')
        ])
    ])

    //INPUTS:
    // input {
    //     message "Should we continue?"
    //     ok "Yes, we should."
    //     parameters {[
    //         string(name: 'INPUTPERSON', defaultValue: 'Mr Inputs', description: 'Who should I say hello to?')
    //     ]}
    // }
    
    ansiColor('xterm'){
        try{
            withCredentials([usernameColonPassword(credentialsId: "SSH", variable: "USERPASS")]){
                stage("one"){
                    echo "one"
                    sh 'env'
                    sh 'env >/tmp/env'
                    echo "sameple URL is ${SAMPLE_URL}"
                }
            }
        
            stage("two"){
                echo "two"
                echo "Properties of parameters are ${params.PERSON}"
            }
            stage("inputs"){
                input(id: 'deploy_approval', message: 'Approve deployment?', ok: 'Deploy', reject: 'Cancel')
                echo "inputs"
            }
            if ( PERSON == "SUBBU"){
                stage("Deployment"){
                    echo "Hello input values of ${INPUTPERSON}"
                }
            }
            
        } catch (e){
            stage("Post Actions"){
                echo 'This will run upon failure'
            }
        }
    }

//PARALLEL EXECUTION OF JOBS
    stage('unit test') {
        parallel([
            hello: {
                echo "hello"
            },
            world: {
                echo "world"
            }
        ])
    }

    stage('build') {
        def stages = [:]

        stages["mac"] = {
            echo "build for mac"
        }
        stages["linux"] = {
            echo "build for linux"
        }

        parallel(stages)
    }
    
}